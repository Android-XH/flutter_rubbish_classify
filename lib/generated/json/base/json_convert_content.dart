// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:rubbishclassify/jsonEntry/img/img_entity.dart';
import 'package:rubbishclassify/generated/json/img_entity_helper.dart';


import 'package:rubbishclassify/jsonEntry/txt/search_txt_entity.dart';
import 'package:rubbishclassify/generated/json/search_txt_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ImgEntity:
			return imgEntityFromJson(data as ImgEntity, json) as T;			case ImgData:
			return imgDataFromJson(data as ImgData, json) as T;					case SearchTxtEntity:
			return searchTxtEntityFromJson(data as SearchTxtEntity, json) as T;			case SearchTxtData:
			return searchTxtDataFromJson(data as SearchTxtData, json) as T;			case SearchTxtDataList:
			return searchTxtDataListFromJson(data as SearchTxtDataList, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ImgEntity:
			return imgEntityToJson(data as ImgEntity);			case ImgData:
			return imgDataToJson(data as ImgData);					case SearchTxtEntity:
			return searchTxtEntityToJson(data as SearchTxtEntity);			case SearchTxtData:
			return searchTxtDataToJson(data as SearchTxtData);			case SearchTxtDataList:
			return searchTxtDataListToJson(data as SearchTxtDataList);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ImgEntity':
			return ImgEntity().fromJson(json);			case 'ImgData':
			return ImgData().fromJson(json);					case 'SearchTxtEntity':
			return SearchTxtEntity().fromJson(json);			case 'SearchTxtData':
			return SearchTxtData().fromJson(json);			case 'SearchTxtDataList':
			return SearchTxtDataList().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ImgEntity':
			return List<ImgEntity>();			case 'ImgData':
			return List<ImgData>();				case 'SearchTxtEntity':
			return List<SearchTxtEntity>();			case 'SearchTxtData':
			return List<SearchTxtData>();			case 'SearchTxtDataList':
			return List<SearchTxtDataList>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}